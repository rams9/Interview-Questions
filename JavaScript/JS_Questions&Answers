******* Data Types  **********
JavaScript has 8 Datatypes
1. String
2. Number
3. Bigint
4. Boolean
5. Undefined
6. Null
7. Symbol
8. Object

The object data type can contain:

1. An object
2. An array
3. A date

// Numbers:
let length = 16;
let weight = 7.5;

// Strings:
let color = "Yellow";
let lastName = "Johnson";

// Booleans
let x = true;
let y = false;

// Object:
const person = {firstName:"John", lastName:"Doe"};

// Array object:
const cars = ["Saab", "Volvo", "BMW"];

// Date object:
const date = new Date("2022-03-25");
***************** end of Data Types **********************

**************** Function chaining *******************
Function chaining is a pattern in JavaScript where multiple functions are called on the same object consecutively. 
Using the same object reference, multiple functions can be invoked. 
It increases the readability of the code and means less redundancy.
example
 var obj = function(){
      this.i = 0;
      this.add = function(i){
         this.i += i;
         return this;
      };
      this.subtract = function(i){
         this.i -= i;
         return this;
      };
      this.print = function(){
         document.write(this.i);
      }
   }
var x = new obj();
x.add(5).subtract(2).print();

*************** end of function chaining ***********
**************
What is function delegation in JavaScript?

Event delegation in JavaScript is a pattern that efficiently handles events. 
Events can be added to a parent element instead of adding to every single element. 
It refers to the process of using event propagation (bubbling) to handle events at
a higher level in the DOM than the element on which the event originated.

**************
Event bubbling is a method of event propagation in the HTML DOM API when an event is in an element inside another element, 
and both elements have registered a handle to that event. 
It is a process that starts with the element that triggered the event and then bubbles up to the 
containing elements in the hierarchy.
